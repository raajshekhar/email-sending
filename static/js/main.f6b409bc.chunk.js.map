{"version":3,"sources":["Components/InputValidation/types/input-label.js","Components/InputValidation/types/pop-over.js","Components/InputValidation/types/icons.js","assests/js/enum.js","Components/InputValidation/types/InputField.js","assests/js/commonFunctions.js","Components/InputValidation/InputValidation.js","Containers/ContactForm/Forms/ContactForm.js","Containers/ContactForm/Forms/validationSchema.js","Containers/ContactForm/ContactForm.js","App.js","reportWebVitals.js","index.js"],"names":["inputFieldLabel","id","labelClass","labelName","labelImp","Label","htmlFor","className","dangerouslySetInnerHTML","__html","React","memo","InputFieldPopover","errorMsg","popoverData","useState","Popover","PopoverBody","reactStrapComponents","setReactStrapComponents","useEffect","then","res","every","Boolean","closeIcon","checkIcon","dynamicIcon","props","icon","class","ENUMS","Object","freeze","ALLOW_ALPHABETS_ONLY","NUMBERS_ONLY","BGS_PHONE","InputField","name","type","value","onChange","onBlur","onKeyUp","placeholder","autoComplete","touched","placement","showIcon","maxLength","onKeyPress","rows","cols","readOnly","restrictions","defaultChecked","inputFields","isOpen","length","target","flip","inputDesign","find","data","labelData","Input","e","text","String","fromCharCode","charCode","which","includes","ENUM","test","preventDefault","trimLeft","trim","trimFunction","customOnKeyPress","InputValidationField","options","setFieldValue","setFieldTouched","passToField","propTypes","PropTypes","bool","string","isRequired","oneOfType","number","func","any","ContactForm","console","log","sectionName","form","values","map","index","indexing","addressRemove","onClick","remove","FieldsData","fieldInfoData","fieldInfo","field","errors","touchedInfo","colLength","InputValidation","fieldsComponents","title","BGSContactForm","message","setMessage","pending","setPending","initialValues","fieldsData","initialValuesFor","Reflect","ownKeys","reduce","finalField","fieldArrayName","fieldArrayData","finalObject","currentObject","createInitialValuesObject","validationSchema","Yup","fields","finalObj","fieldsInfo","finalFieldObj","currentField","validations","validationType","params","PATTERN","validation","currentFieldName","yupValidationData","finalYup","currentYup","validator","forEach","yupObjectCreation","array","of","object","shape","yupValidationObject","submitHandler","dirty","isValid","timer","setTimeout","clearTimeout","Promise","reject","success","contact","resolved","resolve","formSubmit","successReponse","resetForm","catch","failReponse","handleSubmit","onSubmit","component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6b409bc.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Label } from 'reactstrap';\n\nconst inputFieldLabel = ({id, labelClass = '', labelName, labelImp}) => (\n    <Label htmlFor={id} className={labelClass}>\n        <span dangerouslySetInnerHTML={{ __html: labelName }} />\n        <sup className={`text-danger ${labelImp ? '' : 'd-none'}`}>*</sup>\n    </Label>\n);\n\ninputFieldLabel.propTypes = {\n    id: PropTypes.string.isRequired,\n    labelClass: PropTypes.string.isRequired,\n    labelName: PropTypes.string.isRequired,\n    labelImp: PropTypes.any\n}\n\nexport default React.memo(inputFieldLabel);","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst InputFieldPopover = ({errorMsg, ...popoverData}) => {\n\n    const [ reactStrapComponents, setReactStrapComponents ] = useState({Popover: null, PopoverBody: null});\n\n    useEffect(() => {\n            import('reactstrap').then(res => {\n                const { Popover, PopoverBody } = res || {};\n                setReactStrapComponents({ Popover, PopoverBody });\n            })\n            return () => {};\n    }, []);\n\n    const { Popover, PopoverBody } = reactStrapComponents;\n    const allcomponentsAvaialble = [Popover, PopoverBody].every(Boolean);\n    if(!allcomponentsAvaialble) return null;\n\n    return (\n        <div>\n            <Popover {...popoverData}>\n                <PopoverBody className=\"errorInfoMessage\" dangerouslySetInnerHTML={{ __html: errorMsg }} />\n            </Popover>\n        </div>\n    )\n};\n\nInputFieldPopover.propTypes = {\n    errorMsg: PropTypes.string,\n    popoverData: PropTypes.objectOf({\n        isOpen: PropTypes.bool.isRequired,\n        placement: PropTypes.string.isRequired,\n        target: PropTypes.string.isRequired,\n        flip: PropTypes.bool\n    })\n}\n\nexport default React.memo(InputFieldPopover);","import React from 'react';\nimport { Label } from 'reactstrap';\n\nexport const closeIcon = (\n    <span className=\"error-icon\">\n      <i className=\"material-icons text-white\">close</i>\n    </span>\n  );\nexport const checkIcon = (\n    <span className=\"success-icon\">\n    <i className=\"material-icons text-white\">check</i>\n    </span>\n);\n\nexport const dynamicIcon = (props) => {\n  const { icon, className='', id = '' } = {...props}\n  return <Label htmlFor={id}><span class={`material-icons dynamic-material-icon ${className}`}><i className=\"material-icons\">{icon}</i></span></Label>\n}","const ENUMS = Object.freeze({\n    ALLOW_ALPHABETS_ONLY: /^[a-zA-Z \\s]+$/,\n    NUMBERS_ONLY: /^[0-9\\b]+$/,\n    BGS_PHONE: /^(\\+\\d{1,2}\\s?)?1?\\-?\\.?\\s?\\(?\\d{3}\\)?[\\s.-]?\\d{3}[\\s.-]?\\d{4}$/\n});\n\nexport default ENUMS;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Input } from 'reactstrap';\nimport InputFieldLabel from './input-label';\nimport InputFieldPopover from './pop-over';\nimport { dynamicIcon } from './icons';\nimport { customOnKeyPress } from '../../../assests/js/commonFunctions';\n\nconst InputField = (props) => {\n   const {\n        name,\n        type,\n        id,\n        value,\n        onChange,\n        onBlur,\n        onKeyUp,\n        placeholder,\n        className,\n        autoComplete,\n        touched,\n        placement,\n        errorMsg,\n        labelClass,\n        labelName,\n        labelImp,\n        showIcon,\n        maxLength,\n        onKeyPress,\n        rows,\n        cols,\n        readOnly,\n        restrictions,\n        defaultChecked,\n        icon = ''\n      } = props\n    let inputFields = {\n      name,\n      type,\n      id,\n      value,\n      onKeyPress,\n      onBlur,\n      className,\n      onKeyUp,\n      placeholder,\n      autoComplete,\n      maxLength,\n      rows,\n      cols,\n      readOnly,\n      defaultChecked\n    };\n\n    const popoverData = {\n      isOpen: touched && errorMsg.length > 0,\n      placement,\n      target: id,\n      flip: false,\n      errorMsg\n    };\n\n    const inputDesign = [{type: 'checkbox', class: 'input-checkbox-check'}, {type: 'radio', class: 'input-radio-check'}].find(data => data.type === type);\n    const labelData = { id, labelClass: `${labelClass} ${type !== 'checkbox' ? '' : 'ml-4'}`, labelName, labelImp };\n\n    return (\n      <div className={`custom-input-validation custom-${type}-field`}>\n\n        {(labelName && type !== 'checkbox') && <InputFieldLabel {...labelData} /> }\n\n        <div className={`position-relative d-flex ${icon ? 'has-icon': ''} ${(errorMsg && touched) ? 'has-error': ''}`}>\n            {(type==='checkbox') && <InputFieldLabel {...labelData} />}\n            <Input {...inputFields} onChange={onChange} onKeyPress={(e)=>{customOnKeyPress(e, restrictions, onKeyPress)}}  />\n            {showIcon}\n            { icon ? dynamicIcon({icon, id}) : null }\n            {inputDesign ? <div className={inputDesign.class} /> : null }\n        </div>\n\n        {errorMsg && touched && <InputFieldPopover {...popoverData} />}\n\n      </div>\n    );\n  };\n\n  InputField.propTypes = {\n    name: PropTypes.string,\n    defaultChecked: PropTypes.bool,\n    restrictions: PropTypes.array,\n    readOnly: PropTypes.bool,\n    rows: PropTypes.string,\n    cols: PropTypes.string,\n    type: PropTypes.string,\n    id: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    onKeyPress: PropTypes.func.isRequired,\n    onBlur: PropTypes.func.isRequired,\n    onKeyUp: PropTypes.func,\n    placeholder: PropTypes.string,\n    className: PropTypes.string,\n    autoComplete: PropTypes.string,\n    touched: PropTypes.bool,\n    errorMsg: PropTypes.string,\n    placement: PropTypes.string,\n    labelClass: PropTypes.string,\n    labelName: PropTypes.string,\n    labelImp: PropTypes.string,\n    showIcon: PropTypes.any,\n    maxLength: PropTypes.string,\n    icon: PropTypes.oneOf([PropTypes.string, PropTypes.any])\n};\n\nexport default InputField;","import ENUM from \"./enum\";\n\n/**\n * Focus on error element\n * @param {String} className The ClassName\n * @param {Boolean} setTimeoutRequired If setTimeout is required\n*/\nexport const focusErrorElement = (className, setTimeoutRequired) => {\n  if (!className) return;\n  const scrollBehaviour = {behavior: 'smooth', block: 'center',inline: 'nearest'};\n  const elements = [...document.getElementsByClassName(className)];\n  if (setTimeoutRequired) {\n    const element = setTimeout(function(){\n      if (elements.length) elements[0].scrollIntoView(scrollBehaviour);\n      clearTimeout(element);\n    }, 100);\n  } else {\n    if (elements.length) elements[0].scrollIntoView(scrollBehaviour);\n  }\n};\n\nexport const trimFunction = data => typeof(data) === 'string' ? data.trim() : data;\nexport const trimLeftFunction = data => typeof(data) === 'string' ? data.trimLeft() : data;\n\n\nexport const customOnKeyPress = (e, restrictions, onKeyPress) => {\n  /* Allow Alphabets Only */\n  const text = String.fromCharCode(!e.charCode ? e.which : e.charCode);\n  const allowAlphabets = (restrictions.includes('numbers') && restrictions.includes('special-characters')) && !ENUM.ALLOW_ALPHABETS_ONLY.test(text);\n  if (allowAlphabets) return e.preventDefault();\n  /* Allow Alphabets Only */\n\n  const { value } = e.target;\n\n  /* Removing Left space */\n  if(restrictions.includes('left-space')) e.target.value = trimLeftFunction(value);\n  /* Removing Left space */\n\n  /* Trim */\n  if(restrictions.includes('space')) e.target.value = trimFunction(value);\n  /* Trim */\n\n  /* Allow Numbers Only */\n  const allowNumeric = (restrictions.includes('alpha') && restrictions.includes('special-characters')) && !ENUM.NUMBERS_ONLY.test(text)\n  if (allowNumeric) return e.preventDefault();\n  /* Allow Numbers Only */\n\n  onKeyPress(e);\n};","import PropTypes from 'prop-types';\nimport InputField from './types/InputField';\nimport { closeIcon, checkIcon } from './types/icons';\n\nconst InputValidationField = (props) => {\n\n  const {\n    name = '',\n    type = 'text',\n    id = '',\n    value = '',\n    onChange = () => {},\n    onBlur = () => {},\n    onKeyUp = () => {},\n    placeholder = '',\n    className = '',\n    autoComplete = 'off',\n    touched = false,\n    placement = 'bottom',\n    errorMsg = '',\n    labelClass = props.type === 'checkbox' ? 'mb-0' : '',\n    labelName = '',\n    labelImp = false,\n    options = [],\n    maxLength = '200',\n    rows='10',\n    cols='10',\n    onKeyPress = () => {},\n    readOnly=false,\n    restrictions = [],\n    defaultChecked = false,\n    icon = '',\n    setFieldValue = () => {},\n    setFieldTouched = () => {}\n  } = props;\n\n  const passToField = {\n    name,\n    type,\n    id,\n    value,\n    onChange,\n    onBlur,\n    onKeyUp,\n    placeholder,\n    className,\n    autoComplete,\n    touched,\n    placement,\n    errorMsg,\n    labelClass,\n    labelName,\n    labelImp,\n    options,\n    maxLength,\n    onKeyPress,\n    rows,\n    cols,\n    readOnly,\n    restrictions,\n    defaultChecked,\n    icon,\n    setFieldValue,\n    setFieldTouched\n  };\n  let showIcon = null;\n  if (touched) {\n    if (errorMsg) showIcon = closeIcon;\n    else if(value) showIcon = checkIcon;\n  }\n  return InputField({ ...passToField, showIcon });\n};\n\nInputValidationField.propTypes = {\n  defaultChecked: PropTypes.bool,\n  type: PropTypes.string,\n  id: PropTypes.string.isRequired,\n  value: PropTypes.PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  onChange: PropTypes.func.isRequired,\n  onBlur: PropTypes.func.isRequired,\n  onKeyUp: PropTypes.func,\n  placeholder: PropTypes.string,\n  className: PropTypes.string,\n  autoComplete: PropTypes.string,\n  touched: PropTypes.bool,\n  errorMsg: PropTypes.string,\n  placement: PropTypes.string,\n  labelClass: PropTypes.string,\n  labelName: PropTypes.string,\n  labelImp: PropTypes.any,\n  showIcon: PropTypes.any,\n  maxLength: PropTypes.string,\n};\n\nexport default InputValidationField;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FastField } from 'formik';\nimport FieldsData from '../input-fields.json';\nimport InputValidation from '../../../Components/InputValidation/InputValidation';\n\nconst ContactForm = (props) => {\nconsole.log('props::: ',props);\n    const { name: sectionName, form: { values, setFieldValue, setFieldTouched } } = props;\n\n    return (\n        <section>\n            { values[sectionName].map((data, index)=> {\n\n                const indexing = index;\n                const addressRemove = <span onClick={()=>props.remove(index)} class=\"material-icons address-remove-circle mt-2\">remove_circle_outline</span>;\n                return (\n                    <article className={`row pl-0 pr-0 ${sectionName}-article`} key={`form-index-${indexing}`}>\n                    { sectionName === 'order' && <span className='radio-title desktop-button'>Will you need any plants shipping to CA or AZ?</span>}\n                    { indexing ? <div className=\"col-12 pl-0\"><h4 className=\"contact-title  mb-3\">Address {indexing+1} {addressRemove}</h4></div> : null }\n\n                    {FieldsData[sectionName].map((fieldInfoData) => {\n                        const fieldInfo = {...fieldInfoData, id: `${fieldInfoData.id}_${indexing}`};\n                        return (\n                            <FastField name={`${sectionName}.${index}.${fieldInfo.name}`} key={fieldInfo.id}>\n                                {({field, form}) => {\n\n                                    const errors = (form.errors && form.errors[sectionName] && form.errors[sectionName][index] && form.errors[sectionName][index]) || {};\n                                    const touchedInfo = form.touched && form.touched[sectionName] && form.touched[sectionName][index] && (form.touched[sectionName][index] || {});\n                                    const errorMsg= errors[fieldInfo.name];\n                                    const touched = (touchedInfo && touchedInfo[fieldInfo.name]);\n\n                                    return (\n                                        <div className={`bgs-input-element mb-4 ${fieldInfo.colLength} ${fieldInfo.id}_element`}>\n                                            <InputValidation {...fieldInfo} {...field} {...{touched, errorMsg, setFieldValue, setFieldTouched}} value={fieldInfo.type === 'radio' ? fieldInfo.value : field.value} />\n                                        </div>\n                                    );\n\n                                }}\n                            </FastField>\n                        )\n                    })}\n                    </article>\n                )\n            })}\n        </section>\n    );\n};\n\nContactForm.propTypes = {\n    name: PropTypes.string.isRequired,\n    form: PropTypes.object.isRequired,\n    addMore: PropTypes.oneOf([PropTypes.any, PropTypes.bool]),\n    push: PropTypes.func.isRequired,\n    remove: PropTypes.func.isRequired\n}\n\nexport default ContactForm;","import ENUM from \"../../../assests/js/enum\";\n\nexport function createInitialValuesObject(fieldsData = {}){\n\n    const initialValuesFor = Reflect.ownKeys(fieldsData);\n\n    if(!initialValuesFor.length) return {};\n\n    const finalValuesObject = initialValuesFor.reduce((finalField, fieldArrayName) => {\n            const fieldArrayData = fieldsData[fieldArrayName].reduce((finalObject, currentObject) => {\n                return ({\n                            ...finalObject,\n                            [`${currentObject.name}`]: currentObject.value\n                        })\n            }, {});\n            return ({...finalField, [fieldArrayName]: [fieldArrayData]})\n    }, {});\n\n    return finalValuesObject;\n}\n\n\nexport function yupValidationObject({fieldsData = {}, Yup}){\n\n    const initialValuesFor = Reflect.ownKeys(fieldsData);\n\n    if(!initialValuesFor.length) return {};\n\n    const fields = initialValuesFor.reduce((finalObj, fieldArrayName) => {\n\n        const fieldsInfo  = fieldsData[fieldArrayName].reduce((finalFieldObj, currentField) => {\n            let { id, validations = [], validationType = 'string', value } = currentField;\n\n            if(currentField.validationType === 'string') validations = [...validations, { type: 'trim', params: [] }];\n\n            if(id === 'phone' && value !== '') {\n                validations = [{\n                'type': 'matches', 'params':[ENUM.PATTERN.BGS_PHONE, 'Please Enter Valid Phone Number']\n                }]\n            }\n\n            return ([ ...finalFieldObj, {name: id, validations, validationType }]);\n\n        },[]);\n\n        return ({...finalObj, [fieldArrayName]: fieldsInfo});\n\n    },{});\n\n    const validation = initialValuesFor.reduce((finalObj, currentFieldName) => {\n\n        const yupValidationData = fields[currentFieldName].reduce((finalYup, currentYup) => {\n\n            const { name, validations, validationType } = currentYup;\n\n            let field = '';\n            let validator = Yup[validationType]();\n            validations.forEach(validation => {\n                const { params, type } = validation;\n                if (!validator[type])  return;\n                validator = validator[type](...params);\n            });\n\n            field = { [name]: validator };\n\n            return { ...finalYup, ...field }\n\n        }, {});\n\n        const yupObjectCreation =  Yup.array().of(Yup.object().shape(yupValidationData));\n\n        return ({...finalObj, [currentFieldName]: yupObjectCreation});\n\n    },{});\n\n    return  Yup.object().shape({...validation});\n}\n\n\nexport const fieldsComponents = [{name: 'contact', title: 'Send New Email'}];\n\nexport const formSubmit = ({e, props}) => {\n    const { isValid, values } = {...props};\n    if(!isValid) {\n        const timer = setTimeout(() => {\n            clearTimeout(timer);\n        }, 0);\n        return Promise.reject({ success: false, message: 'Please fill the fields' });\n    }\n\n    const requestData = Object.freeze({\n        ...values.contact[0]\n    })\n    let resolved = null;\n    const res = new Promise((resolve, reject) => resolved = resolve);\n    setTimeout(() => resolved && resolved({success: true, message: 'Email has been sent'}), 3000);\n    return res;\n}\n\nexport const bgsOrderRequest = (data) => {\n    return Promise.resolve();\n}","import React, { useCallback, useState } from 'react';\nimport { Formik, Form, FieldArray } from 'formik';\nimport * as Yup from 'yup';\nimport ContactForm from './Forms/ContactForm';\nimport { createInitialValuesObject, yupValidationObject, fieldsComponents, formSubmit } from './Forms/validationSchema';\nimport fieldsData from './input-fields.json';\n\nconst BGSContactForm = () => {\n\n    const [message, setMessage] = useState('');\n    const [pending, setPending] = useState(false);\n\n    const initialValues = createInitialValuesObject(fieldsData);\n    const validationSchema = yupValidationObject({fieldsData, Yup});\n\n    const submitHandler = (data) => {\n        setMessage('');\n        if(!data.props.dirty) return;\n        setPending(true);\n        formSubmit(data)\n        .then((successReponse = {}) => {\n            setMessage(successReponse);\n            data.props.resetForm();\n            setPending(false);\n            const timer = setTimeout(() => {\n                setMessage('');\n                clearTimeout(timer)\n            }, 3000);\n        })\n        .catch((failReponse = {}) => {\n            setMessage(failReponse);\n            setPending(false);\n            const timer = setTimeout(() => {\n                setMessage('');\n                clearTimeout(timer)\n            }, 3000);\n        })\n        // finally not works in IE\n    }\n\n    return (\n        <section id=\"bgs-contact-form\" className={pending ? 'pointer-events-none': ''}>\n            <Formik initialValues={{...initialValues}} validationSchema={validationSchema}>\n            {(props) => {\n                const { values, handleSubmit } = {...props};\n                return (\n                    <Form onSubmit={handleSubmit} className=\"mb-3 p-3\">\n                        {fieldsComponents.map(({name, title}) => (\n                            <div key={`FieldArray${title}${name}`}>\n                            <h4 className=\"contact-title mb-3 mt-3 text-center\">{title}</h4>\n                            <FieldArray name={name} component={ContactForm} />\n                            </div>\n                        ))}\n                        {pending ? <div class=\"loader\"></div> : null}\n                        <div className=\"d-flex justify-content-between\">\n                            <button type=\"submit\" onClick={e => submitHandler({e, props})} className={`send-order-request pt-2 pb-2 pl-4 pr-4 btn btn-sm btn-primary d-flex align-items-center ${props.dirty && props.isValid ? 'btn-danger' : 'btn-secondary'}`}>send <span class=\"material-icons\"> send </span></button>\n                            <button type=\"reset\" onClick={props.resetForm} className=\"send-order-request pt-2 pb-2 pl-4 pr-4 btn btn-sm btn-primary d-flex align-items-center\">Reset <span class=\"material-icons\"> delete </span></button>\n                        </div>\n                        { typeof(message) === 'object' ? <p className={`mt-2 bgs-reponse-message  ${message.success ? 'text-success' : 'text-danger'}`}>{message.message}</p> : null}\n                    </Form>\n                )\n            }}\n            </Formik>\n        </section>\n    );\n};\n\nexport default BGSContactForm;","import EmailForm from './Containers/ContactForm/ContactForm';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App-header\">\n      <EmailForm />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}